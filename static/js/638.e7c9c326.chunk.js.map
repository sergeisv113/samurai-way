{"version":3,"file":"static/js/638.e7c9c326.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Messages.tsx","components/Dialogs/Message/AddMessageForm.tsx","hok/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__HR0Co\",\"dialogBlock\":\"Dialogs_dialogBlock__dZ3i8\",\"dia\":\"Dialogs_dia__e7it6\",\"dialogItems\":\"Dialogs_dialogItems__xkwQC\",\"text\":\"Dialogs_text__8agzG\",\"dialogsItem\":\"Dialogs_dialogsItem__H2tS+\",\"active\":\"Dialogs_active__TxP4A\",\"messages\":\"Dialogs_messages__uemcq\",\"addMessage\":\"Dialogs_addMessage__TLVqG\"};","import React from 'react';\nimport s from './../Dialogs.module.css'\nimport {NavLink} from 'react-router-dom';\n\n type DialogItemType = {\n    name: string\n}\n\nexport const DialogItem = ({name}: DialogItemType) => {\n\n    return <div className={s.dialogItems}>\n        <NavLink to={\"/dialogs/\" + name}>{name}</NavLink>\n    </div>\n}\n\n\n\n","import React from 'react';\nimport s from './../Dialogs.module.css'\n\n\nexport type MessagesType = {\n    id: string\n    text: string\n}\n\n\nexport const Messages = (props: MessagesType) => {\n    return (\n        <div className={s.messages}>\n            {props.text}\n        </div>\n    )\n}\n\n","import {maxLengthCreator, minLengthCreator, required} from \"../../../utils/validators/validator\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport React, {FormEvent} from \"react\";\nimport {FormControl} from \"../../common/FormsControls/FormControl\";\nimport { Button } from \"antd\";\n\nexport type newMessageTextPropsType = {\n    newMessageText: string\n}\n\nlet minLength2 = minLengthCreator(2)\nlet  maxLength100 = maxLengthCreator(100)\n\n\nexport const AddMessageForm = reduxForm<newMessageTextPropsType>({\n    form: 'dialogAddMessageForm'\n})(({reset, handleSubmit}: InjectedFormProps<newMessageTextPropsType>) => {\n        const submitHandler = (e:FormEvent<HTMLFormElement>) => {\n            e.preventDefault()\n            reset()\n            // @ts-ignore\n            handleSubmit()\n            reset()\n        }\n\n\nreturn (\n    <>\n        <form onSubmit={submitHandler}>\n            <div>\n                <Field placeholder={'Enter your message'}\n                       name={'newMessageText'}\n                       component={FormControl}\n                       validate={[required, minLength2, maxLength100]}\n                       typeofform={\"textarea\"}/>\n            </div>\n            <div>\n                <button >send message</button>\n            </div>\n        </form>\n    </>\n   )\n })","import React, {ComponentType} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../redux/store';\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToPropsRedirect = (state: AppStateType): MapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: MapStateToPropsType) => {\n\n        let {isAuth, ...restProps} = props\n        if (!isAuth) {\n            return <Redirect to={'/login'}/>\n        }\n        return <Component  {...restProps as T}/>\n    }\n\n    let ConnectedRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\n    return ConnectedRedirectComponent\n};","import React, {ComponentType} from 'react';\nimport {AppStateType} from '../../redux/store';\nimport {Dialogs} from './Dialogs';\nimport {connect} from 'react-redux';\nimport {compose, Dispatch} from 'redux';\nimport {withAuthRedirect} from '../../hok/withAuthRedirect';\nimport {dialogsPageType, sendMessageAC} from \"../../redux/dialogs-reducer\";\n\n\ntype mapStateToPropsType = {\n    dialogsPage: dialogsPageType,\n    name: string\n}\ntype mapDispatchToPropsType = {\n    sendMessage: (newMessage: string, name: string) => void\n}\nexport type DialogsPropsType = mapStateToPropsType & mapDispatchToPropsType\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n        name: state.auth.login as string\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        sendMessage: (newMessage, name) => dispatch(sendMessageAC(newMessage,name))\n    }\n}\n\nexport default compose<ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n   withAuthRedirect\n)(Dialogs)","import React from 'react';\nimport s from './Dialogs.module.css'\nimport {DialogItem} from './DialogItem/DialogItem';\nimport {DialogsPropsType} from './DialogsContainer';\nimport {Messages} from \"./Message/Messages\";\nimport {AddMessageForm} from \"./Message/AddMessageForm\";\nimport {Separator} from \"../common\";\nimport {AddMessageFormPropsType} from \"./AddMessageForm\";\n\n\nexport const Dialogs = ({dialogsPage, sendMessage, name}: DialogsPropsType) => {\n\n    let dialogsElements =  dialogsPage.dialogs\n        .map(dialog => <DialogItem name={dialog.name}\n                                   key={dialog.id}/>)\n\n    let messagesElements = dialogsPage.messages\n        .map(message => <Messages text={message.text} id={message.id} key={message.id}/>)\n\n    const addNewMessage = (values: AddMessageFormPropsType) => {\n        sendMessage(values.newMessageText, name)\n    }\n    return <div className={s.dialogContainer}>\n        <Separator title={'Messages'}/>\n        <div className={s.dialogs}>\n            <div className={s.dialogBlock}>\n                <div className={s.dia}>\n                    {dialogsElements}\n                </div>\n                <div className={s.messages}>\n                    {messagesElements}\n                </div>\n            </div>\n            <div className={s.addMessage}>\n                <AddMessageForm onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    </div>\n}\n\n"],"names":["DialogItem","_ref","name","_jsx","className","s","children","NavLink","to","Messages","props","text","minLength2","minLengthCreator","maxLength100","maxLengthCreator","AddMessageForm","reduxForm","form","reset","handleSubmit","_Fragment","_jsxs","onSubmit","e","preventDefault","Field","placeholder","component","FormControl","validate","required","typeofform","mapStateToPropsRedirect","state","isAuth","auth","compose","connect","dialogsPage","login","dispatch","sendMessage","newMessage","sendMessageAC","Component","restProps","_objectWithoutProperties","_excluded","_objectSpread","Redirect","dialogsElements","dialogs","map","dialog","id","messagesElements","messages","message","Separator","title","values","newMessageText"],"sourceRoot":""}